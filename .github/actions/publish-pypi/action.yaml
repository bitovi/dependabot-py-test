name: GH-PyPI-Publish
description: 'Publishes a Python package to github-hosted PyPI'

inputs:
  pypi-github-org:
    description: "GitHub hosted PyPI repo's org"
    required: true

  pypi-github-repo:
    description: 'GitHub hosted PyPI repo'
    required: true

  # github-token:
  #   description: 'GitHub token'
  #   required: true

  pypi-github-user:
    description: 'GitHub user to publish the package'
    required: false
    default: 'pypi-publisher[bot]'

  pypi-github-workflow-filename:
    description: 'GitHub workflow filename to trigger'
    required: false
    default: 'publish-trigger.yml'

  pypi-github-workflow-ref:
    description: 'GitHub branch/ref to use when triggering the workflow'
    required: false
    default: 'main'

  checkout:
    description: 'Checkout the repo'
    required: false
    default: 'true'

  # python version to use
  python-version:
    description: 'Python version to use'
    required: true
    default: '3.8'

  toml-file:
    description: 'Path to the toml file'
    required: false
    default: 'pyproject.toml'



runs:
  using: "composite"
  steps:

    # checkout the repo
    - id: checkout
      if: ${{ inputs.checkout == 'true' }}
      name: checkout
      uses: actions/checkout@v4


    # build details object based on toml file
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
          python-version: ${{ inputs.python-version }}

    - name: extract toml data
      id: extract_toml_data
      shell: bash
      env:
        TOML_FILE: ${{ inputs.toml-file }}
      run: |
        echo "::group::Extract toml data"
        toml_file="${TOML_FILE}"
        output_object="{}"
        if [ -f $toml_file ]; then
            echo "Found $toml_file"
            version=$(tomlq -r .tool.poetry.version $toml_file)
            name=$(tomlq -r .tool.poetry.name $toml_file)
            archive_url="{{ github.repositoryUrl }}/archive/refs/tags/{{ github.ref }}.tar.gz"
            output_object="{\"name\": \"$name\", \"version\": \"$version\", \"archive_url\": \"$archive_url\"}"
        else
            echo "No $toml_file found"
            exit 1
        fi

        echo "output_object=${output_object}"
        echo "output_object=${output_object}" >> $GITHUB_OUTPUT
      
    - name: trigger_pypi_publish
      id: trigger_pypi_publish
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
        PYPI_GITHUB_ORG: ${{ inputs.pypi-github-org }}
        PYPI_GITHUB_REPO: ${{ inputs.pypi-github-repo }}
        PYPI_GITHUB_USER: ${{ inputs.pypi-github-user }}
        PYPI_GITHUB_WORKFLOW_FILENAME: ${{ inputs.pypi-github-workflow-filename }}
        PYPI_GITHUB_WORKFLOW_REF: ${{ inputs.pypi-github-workflow-ref }}
        output_object: ${{ steps.extract_toml_data.outputs.output_object }}
      run: |
        echo "::group::Trigger PyPI Publish"
        echo "output_object=${output_object}"

        # use the gh cli to trigger the workflow
        gh workflow run $PYPI_GITHUB_WORKFLOW_FILENAME \
        -R $PYPI_GITHUB_ORG/$PYPI_GITHUB_REPO \
        --json $output_object \
        --ref $PYPI_GITHUB_WORKFLOW_REF

    # - name: Trigger PyPI Publish

    # # don't need this because 'fire and forget' is good
    #   uses: convictional/trigger-workflow-and-wait@v1.6.1
    #   with:
    #       owner: ${{ inputs.pypi-github-org }}
    #       repo: ${{ inputs.pypi-github-repo }}
    #       github_token: ${{ inputs.github-token }}
    #       github_user: ${{ inputs.pypi-github-user }}
    #       workflow_file_name: ${{ inputs.pypi-github-workflow-filename }}
    #       ref: ${{ inputs.pypi-github-workflow-ref }}
    #       wait_interval: 10
    #       client_payload: '${{ steps.extract_toml_data.outputs.output_object }}'